package com.nrz.efj.chapter05.item38;

/**
 * 대부분의 상황에서 열거타입을 확장하는건 좋지 않다
 * 1. 확장 타입 원소 = 기반 타입 원소 지만 역은 아님
 * 2. 확장 타입과 기반타입 원소를 모두 순회할 방법도 없음
 * 3. 구현할 요소가 늘어나 어려움
 *
 * 다만, 연산(Operation) 코드를 구현할때는 확장이 의미 있게 쓰인다.
 *
 * 이 방식의 단점
 * 1. 열거 타입끼리 구현을 상속할 수 없음
 * 2. Operation 하위타입은, 연산 기호를 저장하고 찾는로직이 중복됨 -> 이런 중복코드가 많아질 수 있음
 *
 * 이럴떈, 헬퍼 클래스나 정적 헬퍼 메서드 사용할 수 있다
 * */
public interface Operation {
    double apply(double x, double y);
}
